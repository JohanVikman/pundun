%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.4
%% Purpose: encoder and decoder to the types in mod APOLLO-PDU-Descriptions

-module('APOLLO-PDU-Descriptions').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("APOLLO-PDU-Descriptions.hrl").
-asn1_info([{vsn,'4.0.4'},
            {module,'APOLLO-PDU-Descriptions'},
            {options,[{i,"/home/erdem/github/pundun/src"},
 warnings,ber,errors,
 {cwd,"/home/erdem/github/pundun"},
 {outdir,"/home/erdem/github/pundun/src"},
 {i,"."},
 {i,"/home/erdem/github/pundun/_build/default/lib/apollo"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_APOLLO-PDU'/2,
'enc_Procedure'/2,
'enc_BatchWrite'/2,
'enc_CloseTable'/2,
'enc_CreateTable'/2,
'enc_Delete'/2,
'enc_DeleteTable'/2,
'enc_Error'/2,
'enc_OpenTable'/2,
'enc_Read'/2,
'enc_ReadRange'/2,
'enc_ReadRangeN'/2,
'enc_Response'/2,
'enc_Result'/2,
'enc_TableInfo'/2,
'enc_Write'/2,
'enc_Update'/2,
'enc_First'/2,
'enc_Last'/2,
'enc_Seek'/2,
'enc_Next'/2,
'enc_Prev'/2,
'enc_Columns'/2,
'enc_Cause'/2,
'enc_Comparator'/2,
'enc_Continuation'/2,
'enc_DataModel'/2,
'enc_Field'/2,
'enc_FieldName'/2,
'enc_Key'/2,
'enc_KeyRange'/2,
'enc_KeyColumnsPair'/2,
'enc_KeyColumnsList'/2,
'enc_KcpIt'/2,
'enc_It'/2,
'enc_SizeMargin'/2,
'enc_TableOption'/2,
'enc_TimeMargin'/2,
'enc_Type'/2,
'enc_InstructionType'/2,
'enc_UpdateInstruction'/2,
'enc_UpdateOperation'/2,
'enc_Value'/2,
'enc_Version'/2,
'enc_Wrapper'/2
]).

-export([
'dec_APOLLO-PDU'/2,
'dec_Procedure'/2,
'dec_BatchWrite'/2,
'dec_CloseTable'/2,
'dec_CreateTable'/2,
'dec_Delete'/2,
'dec_DeleteTable'/2,
'dec_Error'/2,
'dec_OpenTable'/2,
'dec_Read'/2,
'dec_ReadRange'/2,
'dec_ReadRangeN'/2,
'dec_Response'/2,
'dec_Result'/2,
'dec_TableInfo'/2,
'dec_Write'/2,
'dec_Update'/2,
'dec_First'/2,
'dec_Last'/2,
'dec_Seek'/2,
'dec_Next'/2,
'dec_Prev'/2,
'dec_Columns'/2,
'dec_Cause'/2,
'dec_Comparator'/2,
'dec_Continuation'/2,
'dec_DataModel'/2,
'dec_Field'/2,
'dec_FieldName'/2,
'dec_Key'/2,
'dec_KeyRange'/2,
'dec_KeyColumnsPair'/2,
'dec_KeyColumnsList'/2,
'dec_KcpIt'/2,
'dec_It'/2,
'dec_SizeMargin'/2,
'dec_TableOption'/2,
'dec_TimeMargin'/2,
'dec_Type'/2,
'dec_InstructionType'/2,
'dec_UpdateInstruction'/2,
'dec_UpdateOperation'/2,
'dec_Value'/2,
'dec_Version'/2,
'dec_Wrapper'/2
]).

-export([
'maxNumOfKeyFields'/0,
'maxNumOfColumns'/0,
'maxNumOfIndexes'/0,
'maxCauseLength'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('APOLLO-PDU',Data) -> 'enc_APOLLO-PDU'(Data);
encode_disp('Procedure',Data) -> 'enc_Procedure'(Data);
encode_disp('BatchWrite',Data) -> 'enc_BatchWrite'(Data);
encode_disp('CloseTable',Data) -> 'enc_CloseTable'(Data);
encode_disp('CreateTable',Data) -> 'enc_CreateTable'(Data);
encode_disp('Delete',Data) -> 'enc_Delete'(Data);
encode_disp('DeleteTable',Data) -> 'enc_DeleteTable'(Data);
encode_disp('Error',Data) -> 'enc_Error'(Data);
encode_disp('OpenTable',Data) -> 'enc_OpenTable'(Data);
encode_disp('Read',Data) -> 'enc_Read'(Data);
encode_disp('ReadRange',Data) -> 'enc_ReadRange'(Data);
encode_disp('ReadRangeN',Data) -> 'enc_ReadRangeN'(Data);
encode_disp('Response',Data) -> 'enc_Response'(Data);
encode_disp('Result',Data) -> 'enc_Result'(Data);
encode_disp('TableInfo',Data) -> 'enc_TableInfo'(Data);
encode_disp('Write',Data) -> 'enc_Write'(Data);
encode_disp('Update',Data) -> 'enc_Update'(Data);
encode_disp('First',Data) -> 'enc_First'(Data);
encode_disp('Last',Data) -> 'enc_Last'(Data);
encode_disp('Seek',Data) -> 'enc_Seek'(Data);
encode_disp('Next',Data) -> 'enc_Next'(Data);
encode_disp('Prev',Data) -> 'enc_Prev'(Data);
encode_disp('Columns',Data) -> 'enc_Columns'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('Comparator',Data) -> 'enc_Comparator'(Data);
encode_disp('Continuation',Data) -> 'enc_Continuation'(Data);
encode_disp('DataModel',Data) -> 'enc_DataModel'(Data);
encode_disp('Field',Data) -> 'enc_Field'(Data);
encode_disp('FieldName',Data) -> 'enc_FieldName'(Data);
encode_disp('Key',Data) -> 'enc_Key'(Data);
encode_disp('KeyRange',Data) -> 'enc_KeyRange'(Data);
encode_disp('KeyColumnsPair',Data) -> 'enc_KeyColumnsPair'(Data);
encode_disp('KeyColumnsList',Data) -> 'enc_KeyColumnsList'(Data);
encode_disp('KcpIt',Data) -> 'enc_KcpIt'(Data);
encode_disp('It',Data) -> 'enc_It'(Data);
encode_disp('SizeMargin',Data) -> 'enc_SizeMargin'(Data);
encode_disp('TableOption',Data) -> 'enc_TableOption'(Data);
encode_disp('TimeMargin',Data) -> 'enc_TimeMargin'(Data);
encode_disp('Type',Data) -> 'enc_Type'(Data);
encode_disp('InstructionType',Data) -> 'enc_InstructionType'(Data);
encode_disp('UpdateInstruction',Data) -> 'enc_UpdateInstruction'(Data);
encode_disp('UpdateOperation',Data) -> 'enc_UpdateOperation'(Data);
encode_disp('Value',Data) -> 'enc_Value'(Data);
encode_disp('Version',Data) -> 'enc_Version'(Data);
encode_disp('Wrapper',Data) -> 'enc_Wrapper'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('APOLLO-PDU',Data) -> 'dec_APOLLO-PDU'(Data);
decode_disp('Procedure',Data) -> 'dec_Procedure'(Data);
decode_disp('BatchWrite',Data) -> 'dec_BatchWrite'(Data);
decode_disp('CloseTable',Data) -> 'dec_CloseTable'(Data);
decode_disp('CreateTable',Data) -> 'dec_CreateTable'(Data);
decode_disp('Delete',Data) -> 'dec_Delete'(Data);
decode_disp('DeleteTable',Data) -> 'dec_DeleteTable'(Data);
decode_disp('Error',Data) -> 'dec_Error'(Data);
decode_disp('OpenTable',Data) -> 'dec_OpenTable'(Data);
decode_disp('Read',Data) -> 'dec_Read'(Data);
decode_disp('ReadRange',Data) -> 'dec_ReadRange'(Data);
decode_disp('ReadRangeN',Data) -> 'dec_ReadRangeN'(Data);
decode_disp('Response',Data) -> 'dec_Response'(Data);
decode_disp('Result',Data) -> 'dec_Result'(Data);
decode_disp('TableInfo',Data) -> 'dec_TableInfo'(Data);
decode_disp('Write',Data) -> 'dec_Write'(Data);
decode_disp('Update',Data) -> 'dec_Update'(Data);
decode_disp('First',Data) -> 'dec_First'(Data);
decode_disp('Last',Data) -> 'dec_Last'(Data);
decode_disp('Seek',Data) -> 'dec_Seek'(Data);
decode_disp('Next',Data) -> 'dec_Next'(Data);
decode_disp('Prev',Data) -> 'dec_Prev'(Data);
decode_disp('Columns',Data) -> 'dec_Columns'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('Comparator',Data) -> 'dec_Comparator'(Data);
decode_disp('Continuation',Data) -> 'dec_Continuation'(Data);
decode_disp('DataModel',Data) -> 'dec_DataModel'(Data);
decode_disp('Field',Data) -> 'dec_Field'(Data);
decode_disp('FieldName',Data) -> 'dec_FieldName'(Data);
decode_disp('Key',Data) -> 'dec_Key'(Data);
decode_disp('KeyRange',Data) -> 'dec_KeyRange'(Data);
decode_disp('KeyColumnsPair',Data) -> 'dec_KeyColumnsPair'(Data);
decode_disp('KeyColumnsList',Data) -> 'dec_KeyColumnsList'(Data);
decode_disp('KcpIt',Data) -> 'dec_KcpIt'(Data);
decode_disp('It',Data) -> 'dec_It'(Data);
decode_disp('SizeMargin',Data) -> 'dec_SizeMargin'(Data);
decode_disp('TableOption',Data) -> 'dec_TableOption'(Data);
decode_disp('TimeMargin',Data) -> 'dec_TimeMargin'(Data);
decode_disp('Type',Data) -> 'dec_Type'(Data);
decode_disp('InstructionType',Data) -> 'dec_InstructionType'(Data);
decode_disp('UpdateInstruction',Data) -> 'dec_UpdateInstruction'(Data);
decode_disp('UpdateOperation',Data) -> 'dec_UpdateOperation'(Data);
decode_disp('Value',Data) -> 'dec_Value'(Data);
decode_disp('Version',Data) -> 'dec_Version'(Data);
decode_disp('Wrapper',Data) -> 'dec_Wrapper'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  APOLLO-PDU
%%================================
'enc_APOLLO-PDU'(Val) ->
    'enc_APOLLO-PDU'(Val, [<<48>>]).

'enc_APOLLO-PDU'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute version(1)   External APOLLO-PDU-Descriptions:Version
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Version'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute transactionId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute procedure(3)   External APOLLO-PDU-Descriptions:Procedure
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Procedure'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_APOLLO-PDU'(Tlv) ->
   'dec_APOLLO-PDU'(Tlv, [16]).

'dec_APOLLO-PDU'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute version(1)   External APOLLO-PDU-Descriptions:Version
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Version'(V1, [131072]),

%%-------------------------------------------------
%% attribute transactionId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute procedure(3)   External APOLLO-PDU-Descriptions:Procedure
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Procedure'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'APOLLO-PDU', Term1, Term2, Term3}.



%%================================
%%  Procedure
%%================================
'enc_Procedure'(Val) ->
    'enc_Procedure'(Val, []).

'enc_Procedure'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      error ->
         'enc_Error'(element(2,Val), [<<160>>]);
      response ->
         'enc_Response'(element(2,Val), [<<161>>]);
      createTable ->
         'enc_CreateTable'(element(2,Val), [<<162>>]);
      deleteTable ->
         'enc_DeleteTable'(element(2,Val), [<<163>>]);
      openTable ->
         'enc_OpenTable'(element(2,Val), [<<164>>]);
      closeTable ->
         'enc_CloseTable'(element(2,Val), [<<165>>]);
      tableInfo ->
         'enc_TableInfo'(element(2,Val), [<<166>>]);
      read ->
         'enc_Read'(element(2,Val), [<<167>>]);
      write ->
         'enc_Write'(element(2,Val), [<<168>>]);
      update ->
         'enc_Update'(element(2,Val), [<<169>>]);
      delete ->
         'enc_Delete'(element(2,Val), [<<170>>]);
      readRange ->
         'enc_ReadRange'(element(2,Val), [<<171>>]);
      readRangeN ->
         'enc_ReadRangeN'(element(2,Val), [<<172>>]);
      batchWrite ->
         'enc_BatchWrite'(element(2,Val), [<<173>>]);
      first ->
         'enc_First'(element(2,Val), [<<174>>]);
      last ->
         'enc_Last'(element(2,Val), [<<175>>]);
      seek ->
         'enc_Seek'(element(2,Val), [<<176>>]);
      next ->
         'enc_Next'(element(2,Val), [<<177>>]);
      prev ->
         'enc_Prev'(element(2,Val), [<<178>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Procedure'(Tlv) ->
   'dec_Procedure'(Tlv, []).

'dec_Procedure'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'error'
    {131072, V1} -> 
        {error, 'dec_Error'(V1, [])};


%% 'response'
    {131073, V1} -> 
        {response, 'dec_Response'(V1, [])};


%% 'createTable'
    {131074, V1} -> 
        {createTable, 'dec_CreateTable'(V1, [])};


%% 'deleteTable'
    {131075, V1} -> 
        {deleteTable, 'dec_DeleteTable'(V1, [])};


%% 'openTable'
    {131076, V1} -> 
        {openTable, 'dec_OpenTable'(V1, [])};


%% 'closeTable'
    {131077, V1} -> 
        {closeTable, 'dec_CloseTable'(V1, [])};


%% 'tableInfo'
    {131078, V1} -> 
        {tableInfo, 'dec_TableInfo'(V1, [])};


%% 'read'
    {131079, V1} -> 
        {read, 'dec_Read'(V1, [])};


%% 'write'
    {131080, V1} -> 
        {write, 'dec_Write'(V1, [])};


%% 'update'
    {131081, V1} -> 
        {update, 'dec_Update'(V1, [])};


%% 'delete'
    {131082, V1} -> 
        {delete, 'dec_Delete'(V1, [])};


%% 'readRange'
    {131083, V1} -> 
        {readRange, 'dec_ReadRange'(V1, [])};


%% 'readRangeN'
    {131084, V1} -> 
        {readRangeN, 'dec_ReadRangeN'(V1, [])};


%% 'batchWrite'
    {131085, V1} -> 
        {batchWrite, 'dec_BatchWrite'(V1, [])};


%% 'first'
    {131086, V1} -> 
        {first, 'dec_First'(V1, [])};


%% 'last'
    {131087, V1} -> 
        {last, 'dec_Last'(V1, [])};


%% 'seek'
    {131088, V1} -> 
        {seek, 'dec_Seek'(V1, [])};


%% 'next'
    {131089, V1} -> 
        {next, 'dec_Next'(V1, [])};


%% 'prev'
    {131090, V1} -> 
        {prev, 'dec_Prev'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  BatchWrite
%%================================
'enc_BatchWrite'(Val) ->
    'enc_BatchWrite'(Val, [<<48>>]).

'enc_BatchWrite'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute deleteKeys(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BatchWrite_deleteKeys'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute writeKvps(3) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_BatchWrite_writeKvps'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  BatchWrite_deleteKeys
%%================================
'enc_BatchWrite_deleteKeys'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_BatchWrite_deleteKeys_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BatchWrite_deleteKeys_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BatchWrite_deleteKeys_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Key'(H, [<<48>>]),
   'enc_BatchWrite_deleteKeys_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  BatchWrite_writeKvps
%%================================
'enc_BatchWrite_writeKvps'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_BatchWrite_writeKvps_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BatchWrite_writeKvps_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BatchWrite_writeKvps_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_KeyColumnsPair'(H, [<<48>>]),
   'enc_BatchWrite_writeKvps_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BatchWrite'(Tlv) ->
   'dec_BatchWrite'(Tlv, [16]).

'dec_BatchWrite'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute deleteKeys(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_BatchWrite_deleteKeys'(V2, [131073]),

%%-------------------------------------------------
%% attribute writeKvps(3) with type SEQUENCE OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_BatchWrite_writeKvps'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'BatchWrite', Term1, Term2, Term3}.

'dec_BatchWrite_deleteKeys'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Key'(V1, [16]) || V1 <- Tlv1].


'dec_BatchWrite_writeKvps'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_KeyColumnsPair'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CloseTable
%%================================
'enc_CloseTable'(Val) ->
    'enc_CloseTable'(Val, [<<48>>]).

'enc_CloseTable'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CloseTable'(Tlv) ->
   'dec_CloseTable'(Tlv, [16]).

'dec_CloseTable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CloseTable', Term1}.



%%================================
%%  CreateTable
%%================================
'enc_CreateTable'(Val) ->
    'enc_CreateTable'(Val, [<<48>>]).

'enc_CreateTable'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute keys(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CreateTable_keys'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute tableOptions(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_CreateTable_tableOptions'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CreateTable_keys
%%================================
'enc_CreateTable_keys'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CreateTable_keys_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CreateTable_keys_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CreateTable_keys_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<22>>]),
   'enc_CreateTable_keys_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CreateTable_tableOptions
%%================================
'enc_CreateTable_tableOptions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CreateTable_tableOptions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CreateTable_tableOptions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CreateTable_tableOptions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TableOption'(H, []),
   'enc_CreateTable_tableOptions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CreateTable'(Tlv) ->
   'dec_CreateTable'(Tlv, [16]).

'dec_CreateTable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute keys(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CreateTable_keys'(V2, [131073]),

%%-------------------------------------------------
%% attribute tableOptions(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_CreateTable_tableOptions'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CreateTable', Term1, Term2, Term3}.

'dec_CreateTable_keys'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_restricted_string(V1, [22]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_CreateTable_tableOptions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TableOption'(V1, []) || V1 <- Tlv1].




%%================================
%%  Delete
%%================================
'enc_Delete'(Val) ->
    'enc_Delete'(Val, [<<48>>]).

'enc_Delete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Delete'(Tlv) ->
   'dec_Delete'(Tlv, [16]).

'dec_Delete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Delete', Term1, Term2}.



%%================================
%%  DeleteTable
%%================================
'enc_DeleteTable'(Val) ->
    'enc_DeleteTable'(Val, [<<48>>]).

'enc_DeleteTable'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DeleteTable'(Tlv) ->
   'dec_DeleteTable'(Tlv, [16]).

'dec_DeleteTable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'DeleteTable', Term1}.



%%================================
%%  Error
%%================================
'enc_Error'(Val) ->
    'enc_Error'(Val, [<<48>>]).

'enc_Error'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute cause(1)   External APOLLO-PDU-Descriptions:Cause OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Cause'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Error'(Tlv) ->
   'dec_Error'(Tlv, [16]).

'dec_Error'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cause(1)   External APOLLO-PDU-Descriptions:Cause OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_Cause'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Error', Term1}.



%%================================
%%  OpenTable
%%================================
'enc_OpenTable'(Val) ->
    'enc_OpenTable'(Val, [<<48>>]).

'enc_OpenTable'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OpenTable'(Tlv) ->
   'dec_OpenTable'(Tlv, [16]).

'dec_OpenTable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'OpenTable', Term1}.



%%================================
%%  Read
%%================================
'enc_Read'(Val) ->
    'enc_Read'(Val, [<<48>>]).

'enc_Read'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Read'(Tlv) ->
   'dec_Read'(Tlv, [16]).

'dec_Read'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Read', Term1, Term2}.



%%================================
%%  ReadRange
%%================================
'enc_ReadRange'(Val) ->
    'enc_ReadRange'(Val, [<<48>>]).

'enc_ReadRange'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute keyRange(2)   External APOLLO-PDU-Descriptions:KeyRange
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_KeyRange'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute limit(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReadRange'(Tlv) ->
   'dec_ReadRange'(Tlv, [16]).

'dec_ReadRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute keyRange(2)   External APOLLO-PDU-Descriptions:KeyRange
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_KeyRange'(V2, [131073]),

%%-------------------------------------------------
%% attribute limit(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ReadRange', Term1, Term2, Term3}.



%%================================
%%  ReadRangeN
%%================================
'enc_ReadRangeN'(Val) ->
    'enc_ReadRangeN'(Val, [<<48>>]).

'enc_ReadRangeN'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute startKey(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute n(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReadRangeN'(Tlv) ->
   'dec_ReadRangeN'(Tlv, [16]).

'dec_ReadRangeN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute startKey(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

%%-------------------------------------------------
%% attribute n(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ReadRangeN', Term1, Term2, Term3}.



%%================================
%%  Response
%%================================
'enc_Response'(Val) ->
    'enc_Response'(Val, [<<48>>]).

'enc_Response'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute result(1)   External APOLLO-PDU-Descriptions:Result OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Result'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute moreDataToBeSent(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Response'(Tlv) ->
   'dec_Response'(Tlv, [16]).

'dec_Response'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1)   External APOLLO-PDU-Descriptions:Result OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_Result'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute moreDataToBeSent(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Response', Term1, Term2}.



%%================================
%%  Result
%%================================
'enc_Result'(Val) ->
    'enc_Result'(Val, []).

'enc_Result'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      columns ->
         'enc_Columns'(element(2,Val), [<<160>>]);
      keyColumnsPair ->
         'enc_KeyColumnsPair'(element(2,Val), [<<161>>]);
      keyColumnsList ->
         'enc_KeyColumnsList'(element(2,Val), [<<162>>]);
      propList ->
         'enc_Result_propList'(element(2,Val), [<<163>>]);
      kcpIt ->
         'enc_KcpIt'(element(2,Val), [<<164>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  Result_propList
%%================================
'enc_Result_propList'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Result_propList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Result_propList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Result_propList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Field'(H, [<<48>>]),
   'enc_Result_propList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Result'(Tlv) ->
   'dec_Result'(Tlv, []).

'dec_Result'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'columns'
    {131072, V1} -> 
        {columns, 'dec_Columns'(V1, [])};


%% 'keyColumnsPair'
    {131073, V1} -> 
        {keyColumnsPair, 'dec_KeyColumnsPair'(V1, [])};


%% 'keyColumnsList'
    {131074, V1} -> 
        {keyColumnsList, 'dec_KeyColumnsList'(V1, [])};


%% 'propList'
    {131075, V1} -> 
        {propList, 'dec_Result_propList'(V1, [])};


%% 'kcpIt'
    {131076, V1} -> 
        {kcpIt, 'dec_KcpIt'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_Result_propList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TableInfo
%%================================
'enc_TableInfo'(Val) ->
    'enc_TableInfo'(Val, [<<48>>]).

'enc_TableInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute attributes(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TableInfo_attributes'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TableInfo_attributes
%%================================
'enc_TableInfo_attributes'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TableInfo_attributes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TableInfo_attributes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TableInfo_attributes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<22>>]),
   'enc_TableInfo_attributes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TableInfo'(Tlv) ->
   'dec_TableInfo'(Tlv, [16]).

'dec_TableInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute attributes(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_TableInfo_attributes'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TableInfo', Term1, Term2}.

'dec_TableInfo_attributes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_restricted_string(V1, [22]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  Write
%%================================
'enc_Write'(Val) ->
    'enc_Write'(Val, [<<48>>]).

'enc_Write'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute columns(3)   External APOLLO-PDU-Descriptions:Columns
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Columns'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Write'(Tlv) ->
   'dec_Write'(Tlv, [16]).

'dec_Write'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

%%-------------------------------------------------
%% attribute columns(3)   External APOLLO-PDU-Descriptions:Columns
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Columns'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Write', Term1, Term2, Term3}.



%%================================
%%  Update
%%================================
'enc_Update'(Val) ->
    'enc_Update'(Val, [<<48>>]).

'enc_Update'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute updateOperations(3) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Update_updateOperations'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Update_updateOperations
%%================================
'enc_Update_updateOperations'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Update_updateOperations_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Update_updateOperations_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Update_updateOperations_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UpdateOperation'(H, [<<48>>]),
   'enc_Update_updateOperations_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Update'(Tlv) ->
   'dec_Update'(Tlv, [16]).

'dec_Update'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

%%-------------------------------------------------
%% attribute updateOperations(3) with type SEQUENCE OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Update_updateOperations'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Update', Term1, Term2, Term3}.

'dec_Update_updateOperations'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UpdateOperation'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  First
%%================================
'enc_First'(Val) ->
    'enc_First'(Val, [<<48>>]).

'enc_First'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_First'(Tlv) ->
   'dec_First'(Tlv, [16]).

'dec_First'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'First', Term1}.



%%================================
%%  Last
%%================================
'enc_Last'(Val) ->
    'enc_Last'(Val, [<<48>>]).

'enc_Last'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Last'(Tlv) ->
   'dec_Last'(Tlv, [16]).

'dec_Last'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Last', Term1}.



%%================================
%%  Seek
%%================================
'enc_Seek'(Val) ->
    'enc_Seek'(Val, [<<48>>]).

'enc_Seek'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Seek'(Tlv) ->
   'dec_Seek'(Tlv, [16]).

'dec_Seek'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tableName(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Seek', Term1, Term2}.



%%================================
%%  Next
%%================================
'enc_Next'(Val) ->
    'enc_Next'(Val, [<<48>>]).

'enc_Next'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute it(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Next'(Tlv) ->
   'dec_Next'(Tlv, [16]).

'dec_Next'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute it(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 512 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Next', Term1}.



%%================================
%%  Prev
%%================================
'enc_Prev'(Val) ->
    'enc_Prev'(Val, [<<48>>]).

'enc_Prev'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute it(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Prev'(Tlv) ->
   'dec_Prev'(Tlv, [16]).

'dec_Prev'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute it(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 512 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Prev', Term1}.



%%================================
%%  Columns
%%================================
'enc_Columns'(Val) ->
    'enc_Columns'(Val, [<<48>>]).

'enc_Columns'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Columns_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Columns_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Columns_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Field'(H, [<<48>>]),
   'enc_Columns_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Columns'(Tlv) ->
   'dec_Columns'(Tlv, [16]).

'dec_Columns'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Cause
%%================================
'enc_Cause'(Val) ->
    'enc_Cause'(Val, []).

'enc_Cause'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      transport ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      protocol ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      system ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      misc ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Cause'(Tlv) ->
   'dec_Cause'(Tlv, []).

'dec_Cause'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'transport'
    {131072, V1} -> 
        {transport, begin
Val1 = decode_restricted_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'protocol'
    {131073, V1} -> 
        {protocol, begin
Val2 = decode_restricted_string(V1, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 64 ->
binary_to_list(Val2);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'system'
    {131074, V1} -> 
        {system, begin
Val3 = decode_restricted_string(V1, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 64 ->
binary_to_list(Val3);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'misc'
    {131075, V1} -> 
        {misc, begin
Val4 = decode_restricted_string(V1, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 64 ->
binary_to_list(Val4);
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Comparator
%%================================
'enc_Comparator'(Val) ->
    'enc_Comparator'(Val, [<<10>>]).

'enc_Comparator'(Val, TagIn) ->
case Val of
descending -> encode_tags(TagIn, [0], 1);
ascending -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Comparator'(Tlv) ->
   'dec_Comparator'(Tlv, [10]).

'dec_Comparator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> descending;
1 -> ascending;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Continuation
%%================================
'enc_Continuation'(Val) ->
    'enc_Continuation'(Val, [<<48>>]).

'enc_Continuation'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute complete(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Key'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Continuation'(Tlv) ->
   'dec_Continuation'(Tlv, [16]).

'dec_Continuation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute complete(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute key(2)   External APOLLO-PDU-Descriptions:Key OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Key'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Continuation', Term1, Term2}.



%%================================
%%  DataModel
%%================================
'enc_DataModel'(Val) ->
    'enc_DataModel'(Val, [<<10>>]).

'enc_DataModel'(Val, TagIn) ->
case Val of
kv -> encode_tags(TagIn, [0], 1);
array -> encode_tags(TagIn, [1], 1);
map -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DataModel'(Tlv) ->
   'dec_DataModel'(Tlv, [10]).

'dec_DataModel'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> kv;
1 -> array;
2 -> map;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Field
%%================================
'enc_Field'(Val) ->
    'enc_Field'(Val, [<<48>>]).

'enc_Field'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute value(2)   External APOLLO-PDU-Descriptions:Value
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Value'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Field'(Tlv) ->
   'dec_Field'(Tlv, [16]).

'dec_Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute name(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute value(2)   External APOLLO-PDU-Descriptions:Value
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Value'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Field', Term1, Term2}.



%%================================
%%  FieldName
%%================================
'enc_FieldName'(Val) ->
    'enc_FieldName'(Val, [<<22>>]).

'enc_FieldName'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_FieldName'(Tlv) ->
   'dec_FieldName'(Tlv, [22]).

'dec_FieldName'(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Key
%%================================
'enc_Key'(Val) ->
    'enc_Key'(Val, [<<48>>]).

'enc_Key'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Key_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Key_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Key_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Field'(H, [<<48>>]),
   'enc_Key_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Key'(Tlv) ->
   'dec_Key'(Tlv, [16]).

'dec_Key'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  KeyRange
%%================================
'enc_KeyRange'(Val) ->
    'enc_KeyRange'(Val, [<<48>>]).

'enc_KeyRange'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute start(1)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute end(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Key'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_KeyRange'(Tlv) ->
   'dec_KeyRange'(Tlv, [16]).

'dec_KeyRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute start(1)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute end(2)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Key'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'KeyRange', Term1, Term2}.



%%================================
%%  KeyColumnsPair
%%================================
'enc_KeyColumnsPair'(Val) ->
    'enc_KeyColumnsPair'(Val, [<<48>>]).

'enc_KeyColumnsPair'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute key(1)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Key'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute columns(2)   External APOLLO-PDU-Descriptions:Columns
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Columns'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_KeyColumnsPair'(Tlv) ->
   'dec_KeyColumnsPair'(Tlv, [16]).

'dec_KeyColumnsPair'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key(1)   External APOLLO-PDU-Descriptions:Key
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Key'(V1, [131072]),

%%-------------------------------------------------
%% attribute columns(2)   External APOLLO-PDU-Descriptions:Columns
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Columns'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'KeyColumnsPair', Term1, Term2}.



%%================================
%%  KeyColumnsList
%%================================
'enc_KeyColumnsList'(Val) ->
    'enc_KeyColumnsList'(Val, [<<48>>]).

'enc_KeyColumnsList'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute list(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_KeyColumnsList_list'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute continuation(2)   External APOLLO-PDU-Descriptions:Continuation OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Continuation'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  KeyColumnsList_list
%%================================
'enc_KeyColumnsList_list'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_KeyColumnsList_list_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_KeyColumnsList_list_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_KeyColumnsList_list_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_KeyColumnsPair'(H, [<<48>>]),
   'enc_KeyColumnsList_list_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_KeyColumnsList'(Tlv) ->
   'dec_KeyColumnsList'(Tlv, [16]).

'dec_KeyColumnsList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute list(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_KeyColumnsList_list'(V1, [131072]),

%%-------------------------------------------------
%% attribute continuation(2)   External APOLLO-PDU-Descriptions:Continuation OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Continuation'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'KeyColumnsList', Term1, Term2}.

'dec_KeyColumnsList_list'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_KeyColumnsPair'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  KcpIt
%%================================
'enc_KcpIt'(Val) ->
    'enc_KcpIt'(Val, [<<48>>]).

'enc_KcpIt'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute keyColumnsPair(1)   External APOLLO-PDU-Descriptions:KeyColumnsPair
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_KeyColumnsPair'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute it(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_KcpIt'(Tlv) ->
   'dec_KcpIt'(Tlv, [16]).

'dec_KcpIt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keyColumnsPair(1)   External APOLLO-PDU-Descriptions:KeyColumnsPair
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_KeyColumnsPair'(V1, [131072]),

%%-------------------------------------------------
%% attribute it(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 512 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'KcpIt', Term1, Term2}.



%%================================
%%  It
%%================================
'enc_It'(Val) ->
    'enc_It'(Val, [<<4>>]).

'enc_It'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_It'(Tlv) ->
   'dec_It'(Tlv, [4]).

'dec_It'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 512 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SizeMargin
%%================================
'enc_SizeMargin'(Val) ->
    'enc_SizeMargin'(Val, []).

'enc_SizeMargin'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      megabytes ->
         encode_integer(element(2,Val), [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SizeMargin'(Tlv) ->
   'dec_SizeMargin'(Tlv, []).

'dec_SizeMargin'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'megabytes'
    {131072, V1} -> 
        {megabytes, decode_integer(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  TableOption
%%================================
'enc_TableOption'(Val) ->
    'enc_TableOption'(Val, []).

'enc_TableOption'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      type ->
         case element(2,Val) of
leveldb -> encode_tags([<<128>>], [0], 1);
etsLeveldb -> encode_tags([<<128>>], [1], 1);
leveldbWrapped -> encode_tags([<<128>>], [2], 1);
etsLeveldbWrapped -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      dataModel ->
         case element(2,Val) of
kv -> encode_tags([<<129>>], [0], 1);
array -> encode_tags([<<129>>], [1], 1);
map -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      wrapper ->
         'enc_Wrapper'(element(2,Val), [<<162>>]);
      memWrapper ->
         'enc_Wrapper'(element(2,Val), [<<163>>]);
      comparator ->
         case element(2,Val) of
descending -> encode_tags([<<132>>], [0], 1);
ascending -> encode_tags([<<132>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end;
      timeSeries ->
         encode_boolean(element(2,Val), [<<133>>]);
      shards ->
         encode_integer(element(2,Val), [<<134>>]);
      distributed ->
         encode_boolean(element(2,Val), [<<135>>]);
      replicationFactor ->
         encode_integer(element(2,Val), [<<136>>]);
      hashExclude ->
         'enc_TableOption_hashExclude'(element(2,Val), [<<169>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TableOption_hashExclude
%%================================
'enc_TableOption_hashExclude'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TableOption_hashExclude_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TableOption_hashExclude_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TableOption_hashExclude_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<22>>]),
   'enc_TableOption_hashExclude_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TableOption'(Tlv) ->
   'dec_TableOption'(Tlv, []).

'dec_TableOption'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'type'
    {131072, V1} -> 
        {type, case decode_integer(V1, []) of
0 -> leveldb;
1 -> etsLeveldb;
2 -> leveldbWrapped;
3 -> etsLeveldbWrapped;
Default1 -> {asn1_enum,Default1}
end};


%% 'dataModel'
    {131073, V1} -> 
        {dataModel, case decode_integer(V1, []) of
0 -> kv;
1 -> array;
2 -> map;
Default2 -> {asn1_enum,Default2}
end};


%% 'wrapper'
    {131074, V1} -> 
        {wrapper, 'dec_Wrapper'(V1, [])};


%% 'memWrapper'
    {131075, V1} -> 
        {memWrapper, 'dec_Wrapper'(V1, [])};


%% 'comparator'
    {131076, V1} -> 
        {comparator, case decode_integer(V1, []) of
0 -> descending;
1 -> ascending;
Default3 -> {asn1_enum,Default3}
end};


%% 'timeSeries'
    {131077, V1} -> 
        {timeSeries, decode_boolean(V1, [])};


%% 'shards'
    {131078, V1} -> 
        {shards, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 8192 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'distributed'
    {131079, V1} -> 
        {distributed, decode_boolean(V1, [])};


%% 'replicationFactor'
    {131080, V1} -> 
        {replicationFactor, decode_integer(V1, [])};


%% 'hashExclude'
    {131081, V1} -> 
        {hashExclude, 'dec_TableOption_hashExclude'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_TableOption_hashExclude'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_restricted_string(V1, [22]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  TimeMargin
%%================================
'enc_TimeMargin'(Val) ->
    'enc_TimeMargin'(Val, []).

'enc_TimeMargin'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      seconds ->
         encode_integer(element(2,Val), [<<128>>]);
      minutes ->
         encode_integer(element(2,Val), [<<129>>]);
      hours ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_TimeMargin'(Tlv) ->
   'dec_TimeMargin'(Tlv, []).

'dec_TimeMargin'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'seconds'
    {131072, V1} -> 
        {seconds, decode_integer(V1, [])};


%% 'minutes'
    {131073, V1} -> 
        {minutes, decode_integer(V1, [])};


%% 'hours'
    {131074, V1} -> 
        {hours, decode_integer(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Type
%%================================
'enc_Type'(Val) ->
    'enc_Type'(Val, [<<10>>]).

'enc_Type'(Val, TagIn) ->
case Val of
leveldb -> encode_tags(TagIn, [0], 1);
etsLeveldb -> encode_tags(TagIn, [1], 1);
leveldbWrapped -> encode_tags(TagIn, [2], 1);
etsLeveldbWrapped -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Type'(Tlv) ->
   'dec_Type'(Tlv, [10]).

'dec_Type'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> leveldb;
1 -> etsLeveldb;
2 -> leveldbWrapped;
3 -> etsLeveldbWrapped;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  InstructionType
%%================================
'enc_InstructionType'(Val) ->
    'enc_InstructionType'(Val, [<<10>>]).

'enc_InstructionType'(Val, TagIn) ->
case Val of
increment -> encode_tags(TagIn, [0], 1);
overwrite -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_InstructionType'(Tlv) ->
   'dec_InstructionType'(Tlv, [10]).

'dec_InstructionType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> increment;
1 -> overwrite;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  UpdateInstruction
%%================================
'enc_UpdateInstruction'(Val) ->
    'enc_UpdateInstruction'(Val, [<<48>>]).

'enc_UpdateInstruction'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute instruction(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
increment -> encode_tags([<<128>>], [0], 1);
overwrite -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute threshold(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute setValue(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UpdateInstruction'(Tlv) ->
   'dec_UpdateInstruction'(Tlv, [16]).

'dec_UpdateInstruction'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute instruction(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> increment;
1 -> overwrite;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute threshold(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute setValue(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UpdateInstruction', Term1, Term2, Term3}.



%%================================
%%  UpdateOperation
%%================================
'enc_UpdateOperation'(Val) ->
    'enc_UpdateOperation'(Val, [<<48>>]).

'enc_UpdateOperation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute field(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute updateInstruction(2)   External APOLLO-PDU-Descriptions:UpdateInstruction
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UpdateInstruction'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute value(3)   External APOLLO-PDU-Descriptions:Value
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Value'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute defaultValue(4)   External APOLLO-PDU-Descriptions:Value OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Value'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UpdateOperation'(Tlv) ->
   'dec_UpdateOperation'(Tlv, [16]).

'dec_UpdateOperation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute field(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute updateInstruction(2)   External APOLLO-PDU-Descriptions:UpdateInstruction
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UpdateInstruction'(V2, [131073]),

%%-------------------------------------------------
%% attribute value(3)   External APOLLO-PDU-Descriptions:Value
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Value'(V3, [131074]),

%%-------------------------------------------------
%% attribute defaultValue(4)   External APOLLO-PDU-Descriptions:Value OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Value'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UpdateOperation', Term1, Term2, Term3, Term4}.



%%================================
%%  Value
%%================================
'enc_Value'(Val) ->
    'enc_Value'(Val, []).

'enc_Value'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      bool ->
         encode_boolean(element(2,Val), [<<128>>]);
      int ->
         encode_integer(element(2,Val), [<<129>>]);
      binary ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      null ->
         encode_null(element(2,Val), [<<131>>]);
      double ->
         encode_restricted_string(element(2,Val), [<<132>>]);
      string ->
         encode_UTF8_string(element(2,Val), [<<133>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Value'(Tlv) ->
   'dec_Value'(Tlv, []).

'dec_Value'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'bool'
    {131072, V1} -> 
        {bool, decode_boolean(V1, [])};


%% 'int'
    {131073, V1} -> 
        {int, decode_integer(V1, [])};


%% 'binary'
    {131074, V1} -> 
        {binary, decode_octet_string(V1, [])};


%% 'null'
    {131075, V1} -> 
        {null, decode_null(V1, [])};


%% 'double'
    {131076, V1} -> 
        {double, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'string'
    {131077, V1} -> 
        {string, decode_UTF8_string(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Version
%%================================
'enc_Version'(Val) ->
    'enc_Version'(Val, [<<48>>]).

'enc_Version'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute major(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute minor(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Version'(Tlv) ->
   'dec_Version'(Tlv, [16]).

'dec_Version'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute major(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute minor(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Version', Term1, Term2}.



%%================================
%%  Wrapper
%%================================
'enc_Wrapper'(Val) ->
    'enc_Wrapper'(Val, [<<48>>]).

'enc_Wrapper'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute numOfBuckets(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute timeMargin(2)   External APOLLO-PDU-Descriptions:TimeMargin OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TimeMargin'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute sizeMargin(3)   External APOLLO-PDU-Descriptions:SizeMargin OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SizeMargin'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Wrapper'(Tlv) ->
   'dec_Wrapper'(Tlv, [16]).

'dec_Wrapper'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numOfBuckets(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 100000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute timeMargin(2)   External APOLLO-PDU-Descriptions:TimeMargin OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_TimeMargin'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute sizeMargin(3)   External APOLLO-PDU-Descriptions:SizeMargin OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SizeMargin'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Wrapper', Term1, Term2, Term3}.

'maxNumOfKeyFields'() ->
100.

'maxNumOfColumns'() ->
10000.

'maxNumOfIndexes'() ->
8.

'maxCauseLength'() ->
64.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_UTF8_string(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin ->
            Bin
    end.

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_UTF8_string(UTF8String, TagIn) when is_binary(UTF8String) ->
    encode_tags(TagIn, UTF8String, byte_size(UTF8String));
encode_UTF8_string(UTF8String, TagIn) ->
    encode_tags(TagIn, UTF8String, length(UTF8String)).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
